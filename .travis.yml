language: cpp

compiler:
  - gcc
  - clang

env:
  global:
#   unfortunately we need this to stay within 50min timelimit given by travis.
#   this also turns off the debug/warning cxxflags
    - CXXFLAGS="-O2 -Wunreachable-code"
  matrix:
#    special CXXFLAGS for maximum speed, overrides global CXXFLAGS, CHECK_KERNEL is the var that controls if we download and check the kernel in that travis job
    - CXXFLAGS="-O3 -march=native -mtune=native" SRCDIR=build CHECK_KERNEL=yes
    - CXXFLAGS="-O3 -march=native -mtune=native" SRCDIR=build CHECK_CLANG=yes
    - CXXFLAGS="-O3 -march=native -mtune=native" SRCDIR=build CHECK_GCC=yes
    - SCAN_BUILD=yes
#    - CXXFLAGS="${CXXFLAGS} -fsanitize=address -fno-omit-frame-pointer" CXX="g++-4.9"
    - CXXFLAGS="${CXXFLAGS} -fsanitize=undefined -fno-omit-frame-pointer"
# regular:
    - MAKEFLAGS="HAVE_RULES=yes" SRCDIR=build VERIFY=1
    - SRCDIR=build VERIFY=1
    - CXXFLAGS="${CXXFLAGS} -DCHECK_INTERNAL"

matrix:
# do notify immediately about it when a job of a build fails.
  fast_finish: true
# exclude kernel checking with clang binary, not needed
  exclude:
    - compiler: clang
      env: CXXFLAGS="-O3 -march=native -mtune=native" SRCDIR=build CHECK_KERNEL=yes
    - compiler: clang
      env: CXXFLAGS="-O3 -march=native -mtune=native" SRCDIR=build CHECK_CLANG=yes
    - compiler: gcc
      env: SCAN_BUILD=yes
    - compiler: clang
      env: CXXFLAGS="${CXXFLAGS} -fsanitize=address -fno-omit-frame-pointer" CXX="g++-4.9"
    - compiler: gcc
      env: CXXFLAGS="${CXXFLAGS} -fsanitize=undefined -fno-omit-frame-pointer"
    - compiler: clang
      env: CXXFLAGS="-O3 -march=native -mtune=native" SRCDIR=build CHECK_GCC=yes
# these may fail:
  allow_failures:
    - env: SCAN_BUILD=yes

before_install:
# install needed deps
 - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
 - sudo apt-get update  -qq
 - sudo apt-get install -qq python-pygments libqt4-core libqt4-gui libqt4-dev qt4-dev-tools qt4-qmake libxml2-utils libpcre3 gdb clang curl
#"g++-4.9"

script:
# check gcc
  - if [[ "$CHECK_GCC" == "yes" ]] && [[ "$CC" == "gcc" ]]; then git clone git://gcc.gnu.org/git/gcc.git --depth=1 -b master & make -j 4 & wait; cd gcc; git checkout 760f023b3f8b560f12059744ffbacb194c9c6dbb ; cd ../ ; touch /tmp/gcc.cppcheck; ./cppcheck gcc --max-configs=1 -j 2 |& tee /tmp/gcc.cppcheck; ! grep "process crashed with signal" /tmp/gcc.cppcheck; exit; fi 
# run scan-build
  - SCANFLAGS="alpha.core.BoolAssignment,alpha.core.CastSize,alpha.core.FixedAddr,alpha.core.IdenticalExpr,alpha.core.PointerArithm,alpha.core.PointerSub,alpha.core.SizeofPtr,alpha.cplusplus.NewDeleteLeaks,alpha.cplusplus.VirtualCall,alpha.security.ArrayBoundV2,alpha.security.MallocOverflow,alpha.security.ReturnPtrRange,alpha.unix.Chroot,alpha.unix.PthreadLock,alpha.unix.SimpleStream,alpha.unix.Stream,alpha.unix.cstring.BufferOverlap,alpha.unix.cstring.NotNullTerminated,alpha.unix.cstring.OutOfBounds,security.FloatLoopCounter,security.insecureAPI.rand"
  - if [[ "$SCAN_BUILD" == "yes" ]]; then STATUS=true; unset CXXFLAGS; curl http://sourceforge.net/apps/trac/cppcheck/raw-attachment/ticket/5308/patch_clang.diff | patch -p1; scan-build -enable-checker ${SCANFLAGS} --status-bugs make test -j 2 || STATUS=false; scan-build --status-bugs -enable-checker ${SCANFLAGS} make reduce || STATUS=false; scan-build --status-bugs -enable-checker ${SCANFLAGS} make dmake || STATUS=false; $STATUS; exit; fi
# download 3.14-rc6 kernel, compile cppcheck, run cppcheck on the kernel to look for crashes in cppcheck. if this is done, terminate build to prevent it from timing out
  - if [[ "$CHECK_KERNEL" == "yes" ]] && [[ "$CC" == "gcc" ]]; then wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.14.tar.xz; mkdir kernel; tar -xJf linux-3.14.tar.xz -C kernel & make -j 4 & wait; touch /tmp/kernel.cppcheck; ./cppcheck kernel --max-configs=1 -j 2 |& tee /tmp/kernel.cppcheck; ! grep "process crashed with signal" /tmp/kernel.cppcheck; exit; fi
# clone clang and check it, skip INPUTS because it takes too long
  - if [[ "$CHECK_CLANG" == "yes" ]] && [[ "$CC" == "gcc" ]]; then git clone http://llvm.org/git/clang.git --depth=1 & make -j 4 & wait; cd clang ; git checkout fd754157c9567390f724a496fe87103b321074a8; cd ../ ; touch /tmp/clang.cppcheck; ./cppcheck clang --max-configs=1 -iclang/INPUTS -j 2 |& tee /tmp/clang.cppcheck; ! grep "process crashed with signal" /tmp/clang.cppcheck; exit; fi 
# compile cppcheck, default build
  - make -j4
  - make test -j4
# compile gui
  - cd gui
  - qmake
  - make -j4
# building gui generates some more files that cppcheck can check, so check the repo *after* building gui
  - cd ../
# use same hack as for kernel to work around cppchecks broken exit status with -j 2 ; create file, tee everything to the file and stdout, grep for errors in the file
  - touch /tmp/cppcheck.cppcheck
  - ./cppcheck --error-exitcode=1 -Ilib --enable=style,performance,portability,warning,internal --suppressions-list=.travis_suppressions . -j 2 |& tee /tmp/cppcheck.cppcheck
  - sh -c "! grep '^\[' /tmp/cppcheck.cppcheck"
  - cd ./gui
# clean rebuild
  - git clean -dfx .
#     can't set this as env flags, so try again with HAVE_RULES=yes
  - qmake HAVE_RULES=yes
  - make -j4
  - cd ../
# check htmlreport stuff
  - ./htmlreport/test_htmlreport.py
  - cd htmlreport
  - ./check.sh
  - cd ../
# check if DESTDIR works  TODO: actually execute this
  - mkdir install_test
  - make DESTDIR=install_test install
# rm everything
  - git clean -dfx
# check what happens if we want to install it to some other dir,
  - make SRCDIR=build CFGDIR=/usr/share/cppcheck/cfg -j 4
  - sudo make SRCDIR=build CFGDIR=/usr/share/cppcheck/cfg install
  - sudo mkdir -p /usr/share/cppcheck/cfg
  - sudo install -D ./cfg/* -t /usr/share/cppcheck/cfg
# check if it actually works:
  - /usr/bin/cppcheck ./cli
# check if reduce tool compiles
  - make reduce -j 4
# check if showtime=top5 works
  - ./tools/test_showtimetop5.sh
# check the files in cgf dir with xmllint
  - xmllint --noout cfg/*
# check if Makefile needs to be regenerated
  - git clean -dfx
  - make dmake
#   now, if dmake modified the makefile, return false!
  - git diff --exit-code

#notifications:
#  irc:
#    channels:
#      - "irc.freenode.org#cppcheck"
#    template:
#      - "[%{commit} : %{author}] %{message}"
#      - "%{build_url}"
#    skip_join: true
